{
  "hash": "da23339b3cfac20fe78fb51ce382085e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fatal Car Accident Clusters on Montana Indian Reservations\"\nsubtitle: \"DSAN 6750 / PPOL 6805: GIS for Spatial Data Science\"\nauthors:\n  - name: Gentry Lamb\n    email: gjl53@georgetown.edu\n    affiliation: Georgetown University\n    corresponding: true\ndf-print: kable\nbibliography: GIS_Manuscript.bib\ntitle-block-banner: \"#E69F0095\"\ntitle-block-banner-color: \"black\"\nformat:\n  html:\n    df-print: kable\n  pdf:\n    link-citations: true\nprefer-html: true\n---\n\n\n\n\n\n\n## Introduction\n\n> In the United States, the American Indian and Alaska Native (AI/AN) population has the highest motor vehicle\ndeath rate, which is significantly greater than that of any other race or ethnic group. [@pollack_motor_2012]\n\nTraffic fatalities are a critical public safety concern, and understanding their spatial patterns is essential for devising targeted interventions. In Montana, a state characterized by vast rural landscapes and a significant Native American population, reservations play a crucial role in the socio-cultural and geographic fabric. Despite making up only a fraction of the state’s total area, reservations are home to unique road networks and distinct socio-economic conditions, which may influence traffic safety outcomes.\n\nResearch on traffic fatalities has often revealed that crashes do not occur randomly across space but instead exhibit spatial patterns due to underlying factors such as road design, traffic density, and environmental conditions. In particular, reservations may face unique challenges, including limited road maintenance resources, longer emergency response times, and differing traffic laws, all of which could contribute to fatal crash clustering. However, the extent to which these crashes exhibit significant spatial clustering on reservations compared to other areas remains unclear.\n\nThis study seeks to address this gap by examining whether fatal car crashes on Montana Reservations show significant spatial clustering relative to crashes occurring outside reservation boundaries. Using GIS and spatial data science tools, the study will analyze crash locations to test the hypothesis: \n\n> **Fatal car crashes on Montana Reservations show significant spatial clustering compared to crashes outside reservation areas.**\n\nThrough this analysis, the study aims to identify potential spatial patterns and their implications for road safety planning and resource allocation, contributing to a deeper understanding of traffic fatalities in culturally and geographically distinct areas like Montana Reservations.\n\n## Literature Review\n\n\n\n## Methodology\n\n### Data\n\nOur data is sourced from several places. The first comes from the Montana Spatial Data Infrastructure [@msdi_tribal_nations_2021], which provided the shape files for the 7 different Montana Reservations. The fatal car accident data was sourced from the National Highway Traffic Safety Administration's Fatality Analysis Reporting System [@nhtsa_FARS_2020_2022]. It provided location data and many other attributes for all fatal car accidents across the nation. \n\n### Statistical Test\n\nMoran’s I:\nCalculate the global Moran’s I statistic to determine the degree of spatial autocorrelation within and outside reservation areas.\n\n## Exploratory Data Analysis (EDA)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(dplyr) |> suppressPackageStartupMessages()\nlibrary(sf) |> suppressPackageStartupMessages()\nlibrary(spatstat) |> suppressPackageStartupMessages()\nlibrary(stars) |> suppressPackageStartupMessages()\nlibrary(mapview) |> suppressPackageStartupMessages()\nlibrary(units) |> suppressPackageStartupMessages()\nlibrary(ggplot2) |> suppressPackageStartupMessages()\ncb_palette <- c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\nset.seed(6750)\nraster_eps <- 500\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# read in the state and reservation shape files, only keeping name and geometry\nmt_sf <- sf::read_sf(\"data/MontanaStateBoundary_shp/StateofMontana.shp\")  |> select(NAME, geometry) |> st_transform(3857)\nrez_sf <- sf::read_sf(\"data/MontanaReservations_shp/MontanaReservations.shp\") |> select(NAME, geometry) |> st_transform(3857)\nhead(rez_sf)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|NAME              |geometry                       |\n|:-----------------|:------------------------------|\n|BLACKFEET         |MULTIPOLYGON (((-12508750 6... |\n|ROCKY BOY'S       |MULTIPOLYGON (((-12213276 6... |\n|FORT BELKNAP      |MULTIPOLYGON (((-12119609 6... |\n|FORT PECK         |MULTIPOLYGON (((-11722649 6... |\n|NORTHERN CHEYENNE |MULTIPOLYGON (((-11853568 5... |\n|CROW              |MULTIPOLYGON (((-11912872 5... |\n\n</div>\n:::\n:::\n\n\n\n\n\n\nShow Montana as a whole with the reservations overlayed\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# create mnapview objects of the state and reservations\nmt_map <- mapview(mt_sf)\nrez_map <- mapview(rez_sf, label='NAME')\n# display\n# mt_map + rez_map\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# read in fatal accident data from each year, only keeping relevant columns\ndf20 <- read.csv('./data/accident2020.csv') |> filter(STATENAME=='Montana') |> select(STATENAME, FATALS, LATITUDE, LONGITUD) |> mutate(YEAR=2020)\ndf21 <- read.csv('./data/accident2021.csv') |> filter(STATENAME=='Montana') |> select(STATENAME, FATALS, LATITUDE, LONGITUD) |> mutate(YEAR=2021)\ndf22 <- read.csv('./data/accident2022.csv') |> filter(STATENAME=='Montana') |> select(STATENAME, FATALS, LATITUDE, LONGITUD) |> mutate(YEAR=2022)\n# combine all years into one year\naccidents_df <- rbind(df20, df21, df22)\nhead(accidents_df)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|STATENAME | FATALS| LATITUDE|  LONGITUD| YEAR|\n|:---------|------:|--------:|---------:|----:|\n|Montana   |      1| 47.19834| -114.1060| 2020|\n|Montana   |      1| 47.31310| -105.8845| 2020|\n|Montana   |      1| 48.45659| -108.7516| 2020|\n|Montana   |      1| 45.01128| -111.6483| 2020|\n|Montana   |      1| 46.62944| -111.9701| 2020|\n|Montana   |      2| 47.56707| -111.7871| 2020|\n\n</div>\n:::\n:::\n\n\n\n\n\n\nNow we plot the fatal car accidents that occured in Montana in the years 2020-2022. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# prepare accidents sf and show map\naccidents_sf<- sf::st_as_sf(\n    accidents_df,\n    coords = c(\"LONGITUD\", \"LATITUDE\"), \n    crs = 4326\n  )\n# create map boject of accidents\naccidents_map <- mapview(accidents_sf)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# display\n# accidents_map\n```\n:::\n\n\n\n\n\n\nNow let's use `sf_join` to see which accidents occur within the bounds of a reservation and plot them again. This time we include the convex hull of Montana. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# get MT convex hull\nmt_hull_sf <- mt_sf |> sf::st_convex_hull()\n# create map object\nmt_hull_map <- mapview(mt_hull_sf)\n\n# add new column that indicates if the crash occured on a reservation\naccidents_sf <- accidents_sf |> st_transform(3857) \naccidents_sf <- st_join(accidents_sf, rez_sf) |> mutate(\n    reservation = (!is.na(NAME))\n)\n# create map object of accidents\naccidents_rez_map <- mapview(accidents_sf, zcol='reservation')\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in validateCoords(lng, lat, funcName): Data contains 2 rows with either\nmissing or invalid lat/lon values and will be ignored\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# display\n# mt_hull_map + accidents_rez_map\n```\n:::\n\n\n\n\n\n\n## Hypothesis Testing (Regression)\n\nMake non-reservation car accidents a `ppp` object. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\naccidents_non_sfc <- accidents_sf |> filter(reservation==FALSE) |> sf::st_as_sfc()\naccidents_non_ppp <- as.ppp(accidents_non_sfc, W=as.owin(mt_hull_sf))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in spatstat.geom::ppp(cc[, 1], cc[, 2], window = W, marks = NULL, : 2\nout of 501 points had NA or NaN coordinate values, and were discarded\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\naccidents_non_ppp |> sf::st_as_sf() |> ggplot() + \n    geom_sf() +\n    theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nEstimating the Population Intensity Function\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npop_int <- density(accidents_non_ppp, eps=raster_eps)\n\nplot(pop_int)\ncontour(pop_int, add=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nppp intensity overlay\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npop_stars <- pop_int |> stars::st_as_stars()\nnonrez_points_sf <- accidents_non_ppp |> sf::st_as_sf() |> filter(label == \"point\")\nnonrez_points_sf |> ggplot() +\n  stars::geom_stars(data=pop_stars) +\n  geom_sf() +\n  theme_classic() +\n  scale_fill_viridis_c(option=\"C\", na.value=\"transparent\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\npopulation data tesselation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nnum_regions <- 3\nregion_labels <- c(\"Low\", \"Middle\", \"High\")\npop_vals <- pop_int\npop_quant <- quantile(pop_vals, probs=(0:num_regions) / num_regions, na.rm=TRUE)\npop_cut <- cut(pop_vals, breaks=pop_quant, labels=region_labels)\npop_areas <- tess(image=pop_cut)\nplot(pop_areas)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\nrez accidents as point pattern\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\naccidents_rez_sfc <- accidents_sf |> filter(reservation==TRUE) |> sf::st_as_sfc()\naccidents_rez_ppp <- as.ppp(accidents_rez_sfc, W=as.owin(mt_hull_sf))\n\naccidents_rez_ppp |> sf::st_as_sf() |> ggplot() + \n    geom_sf() +\n    theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nReservation Intensity Function\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nrez_int <- density(accidents_rez_ppp, eps=raster_eps)\n\nplot(rez_int)\ncontour(rez_int, add=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nlow, medium, high poulation counts\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nobs_rez_counts <- quadratcount(accidents_rez_ppp, tess=pop_areas) |> as.vector()\nnames(obs_rez_counts) <- region_labels\nobs_rez_counts <- obs_rez_counts |> tibble::as_tibble_row()\n```\n:::\n\n\n\n\n\n\nRez points on rez intensity function\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nrez_stars <- rez_int |> stars::st_as_stars()\nrez_points_sf <- accidents_rez_ppp |> sf::st_as_sf() |> filter(label == \"point\")\nrez_points_sf |> ggplot() +\n  stars::geom_stars(data=rez_stars) +\n  geom_sf() +\n  theme_classic() +\n  scale_fill_viridis_c(option=\"C\", na.value=\"transparent\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code .hidden}\nggsave('plot.png')\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nMOnte carlo simulation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Your code here\ncompute_quadrat_counts <- function(sim_ppp) {\n  sim_counts <- quadratcount(sim_ppp, tess=pop_areas) |> as.vector()\n  names(sim_counts) <- region_labels\n  return(sim_counts)\n}\n\ngen_sims_ppp <- function(num_sims) {\n  gen_sims <- spatstat.random::rpoint(\n    n = nrow(rez_points_sf),\n    f = pop_int,\n    nsim = num_sims\n  )\n  return(gen_sims)\n}\nfull_sims_list <- gen_sims_ppp(999)\nfull_count_list <- lapply(X = full_sims_list, FUN=compute_quadrat_counts)\nfull_count_df <- full_count_list |> as_tibble() |> t() |> as_tibble(.name_repair=\"unique\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nNew names:\n• `` -> `...1`\n• `` -> `...2`\n• `` -> `...3`\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nnames(full_count_df) <- region_labels\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmc_df <- bind_rows(full_count_df, obs_rez_counts)\nfull_count_df |> ggplot(aes(x=Middle)) +\n  geom_bar(stat='count') +\n  geom_vline(xintercept = obs_rez_counts$Middle, linetype=\"dashed\", color='red') +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code .hidden}\nggsave(\"plot.png\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nSaving 7 x 5 in image\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Discussion\n\n## Conclusion\n\n\n## References\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}